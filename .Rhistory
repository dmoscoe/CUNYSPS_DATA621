p3 = plot(imputate_na(df, yoj, target_flag, method = "rpart"))+
theme_minimal()+
theme(legend.position = "top")
yoj<- imputate_na(df, yoj, target_flag, method = "rpart")
summary(yoj)
# income
p4 = plot(imputate_na(df, income, target_flag, method = "rpart"))+
theme_minimal()+
theme(legend.position = "top")
income<-imputate_na(df, income, target_flag, method = "rpart")
summary(income)
#age
p5 = plot(imputate_na(df, age, method = "rpart"))+  #any of the tests work here
theme_minimal()+
theme(legend.position = "top")
age<-imputate_na(df, age, method = "rpart")
#build a working dataframe
temp<-cbind(car_age, home_val, yoj, income, age)
temp%<>%as.data.frame(temp)
df%<>%dplyr::select(!c(car_age, home_val, yoj, income, age))%>%
cbind(temp)
df%<>%mutate_if(is.numeric, round)
#impute values for missing categorical data - job
job<-imputate_na(df, job, method = "mice", seed = 999)
p6 = plot(job)+theme_minimal()+theme(legend.position = "top")
# combine into new df
df<-df%>%dplyr::select(!job)
df<-cbind(df,job)
df$job<-factor(df$job)
#assemble plot grid
g1 <- as_grob(p1)
g2 <- as_grob(p2)
g3 <- as_grob(p3)
g4 <- as_grob(p4)
g5 <- as_grob(p5)
g6 <- as_grob(p6)
grid.arrange(g1, g2, g3, g4 , g5, g6, ncol=1)
options(scipen=-10)
#identify highly skewed data
df%>%find_skewness(index=FALSE, thres=TRUE)#this is good
# assess normality - Shapiro Wilke
df%>%normality()%>%data_frame()%>%
mutate(p_value = formatC(p_value, format = "e", digits = 2), statistic = round(statistic,3))%>%
flextable(theme_fun = theme_booktabs())
# other diagnostics
df%>%
diagnose_category()%>%
flextable(theme_fun = theme_booktabs())
df%>%
diagnose_numeric()%>%
dplyr::select(variables, min, mean, median, max, zero, minus)%>%
flextable(theme_fun = theme_booktabs())
df%>%plot_normality(hjust = 2)
#Correct obvious data errors - negative values
df$car_age[df$car_age < 0] <- NA
diagnose_outlier(df)%>%arrange(desc(outliers_cnt)) %>%
mutate_if(is.numeric, round , digits=3)%>% flextable()
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier()
#Correct obvious data errors - negative values
df$car_age[df$car_age < 0] <- NA
diagnose_outlier(df)%>%arrange(desc(outliers_cnt)) %>%
mutate_if(is.numeric, round , digits=3)%>% flextable()
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(hjust = 2)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(hjust = 1)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(hjust = 0)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(hjust = 0)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(hjust = 2)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(hjust = 1)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(hjust = 3)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(hjust = 4)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(just = 4)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(valid.just = 4)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(valid.just = 2)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(valid.just = 1)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(valid.just = .5)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(hjust = .5)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(vjust = .5)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier()
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier(text = element_text(debug = TRUE))
knitr::opts_chunk$set(echo = F, results = 'asis', comment = NA, warning = F, message = F)
options(knitr.kable.NA = '')
library(tidyverse)
library(janitor)
library(magrittr)
library(flextable)
library(dlookr)
library(mice)
library(ggpubr)
library(viridis)
library(corrplot)
library(logistf)
library(car)
library(MASS) # step AIC
library(caret)
library(pROC)
library(rcompanion) #CramersV test for categoricals
library(pscl)
library(broom)
# library(gtable)
# library(grid)
# library(cowplot)
# library(gridExtra)
# library(grid)
# library(ggplot2)
# library(lattice)
# library(knitr)
myboxplot <- function(data,x,y){
fig = data%>%
ggplot(aes(data[[x]],data[[y]])) +
geom_boxplot() +
ggtitle(paste0(y," by ", x))+
xlab(NULL)+
ylab(NULL)
print(fig)
}
myhist <- function(data,x,y){
fig = data%>%
ggplot(aes(log(data[[y]]) , fill = data[[x]])) +
geom_histogram() +
ggtitle(paste0("log ",y," by ", x))+
xlab(NULL)+
ylab(NULL)
print(fig)
}
modelmtx  <- function(data, model,name,threshold){
target = names(model.frame(model))[1]
data$predicted = factor(ifelse(predict(model,data,type="response") > threshold ,1,0))
confusion <- confusionMatrix(data$predicted, data[[target]])
mresults <- tibble(
model_name = name,
predictors = length(coef(model))-1,
precision = confusion$byClass[[5]],
auc = auc(roc(response = as.numeric(data[[target]]), predictor = as.numeric(data$predicted)))[1],
AIC = model$aic,
BIC = BIC(model)
)
return(mresults)
}
evalpath = 'https://raw.githubusercontent.com/mtelab1/CUNYSPS_DATA621/main/insurance-evaluation-data.csv'
trainpath = 'https://raw.githubusercontent.com/mtelab1/CUNYSPS_DATA621/main/insurance_training_data.csv'
raw <- read_csv(trainpath)
test <- read_csv(evalpath)
# initial clean of col names
raw%<>%clean_names
# remove any empty rows and cols
raw%<>%remove_empty(c("rows", "cols"))
# assess presence of duplicates
get_dupes(raw)
# basic characterization
str(raw)
#clean extraneous symbols from char col values and convert to numeric as appropriate
df<-raw%>%
mutate_if(is_character, str_replace_all, '\\$|,|z_|<', '')%>%
mutate_at(c(8,10,17,21), as.numeric)%>%
mutate_at(c(2), as.factor)
# round numeric columns
df%<>%mutate_if(is.numeric, round)
# identify unique values in our character cols
id_distinct <- df%>%
dplyr::select(where(is_character))%>%
map(~str_c(unique(.x),collapse = ",")) %>%
bind_rows() %>%
gather(key = col_name, value = col_unique)
# Update col values for clarity and brevity
df%<>%
mutate_if(is_character, str_replace_all, "No|no",'N')%>%
mutate_if(is_character, str_replace_all, "Yes|yes",'Y')%>%
mutate_if(is_character, str_replace_all, "Highly Urban/ Urban",'Urban')%>%
mutate_if(is_character, str_replace_all, "Highly Rural/ Rural",'Rural')
# convert character cols to factor and set level for education col
df %<>%mutate_if(is_character, ~(factor(.)))
df$education<-factor(df$education, levels=c("High School", "Bachelors", "Masters", "PhD"))
#basic missing data table
df%>%
diagnose()%>%
dplyr::select(-unique_count, -unique_rate)%>%
filter(missing_count>0)%>%
arrange(desc(missing_count))%>%
flextable()
#impute numerical vars using dlookr, methods have been preselected based on initial plots.
#car_age
p1 = plot(imputate_na(df, car_age, target_flag, method = "rpart", seed = 999))+
theme_minimal()+ theme(legend.position = "top")
car_age<-imputate_na(df, car_age, target_flag, method = "rpart", seed = 999)
summary(car_age)
#home_val
p2 = plot(imputate_na(df, home_val, target_flag, method = "rpart"))+
theme_minimal()+
theme(legend.position = "top")
home_val<-imputate_na(df, home_val, target_flag, method = "rpart")
summary(home_val)
#yoj
p3 = plot(imputate_na(df, yoj, target_flag, method = "rpart"))+
theme_minimal()+
theme(legend.position = "top")
yoj<- imputate_na(df, yoj, target_flag, method = "rpart")
summary(yoj)
# income
p4 = plot(imputate_na(df, income, target_flag, method = "rpart"))+
theme_minimal()+
theme(legend.position = "top")
income<-imputate_na(df, income, target_flag, method = "rpart")
summary(income)
#age
p5 = plot(imputate_na(df, age, method = "rpart"))+  #any of the tests work here
theme_minimal()+
theme(legend.position = "top")
age<-imputate_na(df, age, method = "rpart")
#build a working dataframe
temp<-cbind(car_age, home_val, yoj, income, age)
temp%<>%as.data.frame(temp)
df%<>%dplyr::select(!c(car_age, home_val, yoj, income, age))%>%
cbind(temp)
df%<>%mutate_if(is.numeric, round)
#impute values for missing categorical data - job
job<-imputate_na(df, job, method = "mice", seed = 999)
p6 = plot(job)+theme_minimal()+theme(legend.position = "top")
# combine into new df
df<-df%>%dplyr::select(!job)
df<-cbind(df,job)
df$job<-factor(df$job)
options(scipen=-10)
#identify highly skewed data
df%>%find_skewness(index=FALSE, thres=TRUE)#this is good
# assess normality - Shapiro Wilke
df%>%normality()%>%data_frame()%>%
mutate(p_value = formatC(p_value, format = "e", digits = 2), statistic = round(statistic,3))%>%
flextable(theme_fun = theme_booktabs())
# other diagnostics
df%>%
diagnose_category()%>%
flextable(theme_fun = theme_booktabs())
df%>%
diagnose_numeric()%>%
dplyr::select(variables, min, mean, median, max, zero, minus)%>%
flextable(theme_fun = theme_booktabs())
df%>%plot_normality()
library(gridExtra)
knitr::opts_chunk$set(echo = F, results = 'asis', comment = NA, warning = F, message = F)
options(knitr.kable.NA = '')
df%>%plot_normality()
library(tidyverse)
library(janitor)
library(magrittr)
library(flextable)
library(dlookr)
library(mice)
library(ggpubr)
library(viridis)
library(corrplot)
library(logistf)
library(car)
library(MASS) # step AIC
library(caret)
library(pROC)
library(rcompanion) #CramersV test for categoricals
library(pscl)
library(broom)
df%>%plot_normality()
knitr::opts_chunk$set(echo = F, results = 'asis', comment = NA, warning = F, message = F)
options(knitr.kable.NA = '')
library(tidyverse)
library(janitor)
library(magrittr)
library(flextable)
library(dlookr)
library(mice)
library(ggpubr)
library(viridis)
library(corrplot)
library(logistf)
library(car)
library(MASS) # step AIC
library(caret)
library(pROC)
library(rcompanion) #CramersV test for categoricals
library(pscl)
library(broom)
library(gtable)
library(grid)
library(cowplot)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
library(knitr)
myboxplot <- function(data,x,y){
fig = data%>%
ggplot(aes(data[[x]],data[[y]])) +
geom_boxplot() +
ggtitle(paste0(y," by ", x))+
xlab(NULL)+
ylab(NULL)
print(fig)
}
myhist <- function(data,x,y){
fig = data%>%
ggplot(aes(log(data[[y]]) , fill = data[[x]])) +
geom_histogram() +
ggtitle(paste0("log ",y," by ", x))+
xlab(NULL)+
ylab(NULL)
print(fig)
}
modelmtx  <- function(data, model,name,threshold){
target = names(model.frame(model))[1]
data$predicted = factor(ifelse(predict(model,data,type="response") > threshold ,1,0))
confusion <- confusionMatrix(data$predicted, data[[target]])
mresults <- tibble(
model_name = name,
predictors = length(coef(model))-1,
precision = confusion$byClass[[5]],
auc = auc(roc(response = as.numeric(data[[target]]), predictor = as.numeric(data$predicted)))[1],
AIC = model$aic,
BIC = BIC(model)
)
return(mresults)
}
evalpath = 'https://raw.githubusercontent.com/mtelab1/CUNYSPS_DATA621/main/insurance-evaluation-data.csv'
trainpath = 'https://raw.githubusercontent.com/mtelab1/CUNYSPS_DATA621/main/insurance_training_data.csv'
raw <- read_csv(trainpath)
test <- read_csv(evalpath)
# initial clean of col names
raw%<>%clean_names
# remove any empty rows and cols
raw%<>%remove_empty(c("rows", "cols"))
# assess presence of duplicates
get_dupes(raw)
# basic characterization
str(raw)
#clean extraneous symbols from char col values and convert to numeric as appropriate
df<-raw%>%
mutate_if(is_character, str_replace_all, '\\$|,|z_|<', '')%>%
mutate_at(c(8,10,17,21), as.numeric)%>%
mutate_at(c(2), as.factor)
# round numeric columns
df%<>%mutate_if(is.numeric, round)
# identify unique values in our character cols
id_distinct <- df%>%
dplyr::select(where(is_character))%>%
map(~str_c(unique(.x),collapse = ",")) %>%
bind_rows() %>%
gather(key = col_name, value = col_unique)
# Update col values for clarity and brevity
df%<>%
mutate_if(is_character, str_replace_all, "No|no",'N')%>%
mutate_if(is_character, str_replace_all, "Yes|yes",'Y')%>%
mutate_if(is_character, str_replace_all, "Highly Urban/ Urban",'Urban')%>%
mutate_if(is_character, str_replace_all, "Highly Rural/ Rural",'Rural')
# convert character cols to factor and set level for education col
df %<>%mutate_if(is_character, ~(factor(.)))
df$education<-factor(df$education, levels=c("High School", "Bachelors", "Masters", "PhD"))
#basic missing data table
df%>%
diagnose()%>%
dplyr::select(-unique_count, -unique_rate)%>%
filter(missing_count>0)%>%
arrange(desc(missing_count))%>%
flextable()
#impute numerical vars using dlookr, methods have been preselected based on initial plots.
#car_age
p1 = plot(imputate_na(df, car_age, target_flag, method = "rpart", seed = 999))+
theme_minimal()+ theme(legend.position = "top")
car_age<-imputate_na(df, car_age, target_flag, method = "rpart", seed = 999)
summary(car_age)
#home_val
p2 = plot(imputate_na(df, home_val, target_flag, method = "rpart"))+
theme_minimal()+
theme(legend.position = "top")
home_val<-imputate_na(df, home_val, target_flag, method = "rpart")
summary(home_val)
#yoj
p3 = plot(imputate_na(df, yoj, target_flag, method = "rpart"))+
theme_minimal()+
theme(legend.position = "top")
yoj<- imputate_na(df, yoj, target_flag, method = "rpart")
summary(yoj)
# income
p4 = plot(imputate_na(df, income, target_flag, method = "rpart"))+
theme_minimal()+
theme(legend.position = "top")
income<-imputate_na(df, income, target_flag, method = "rpart")
summary(income)
#age
p5 = plot(imputate_na(df, age, method = "rpart"))+  #any of the tests work here
theme_minimal()+
theme(legend.position = "top")
age<-imputate_na(df, age, method = "rpart")
#build a working dataframe
temp<-cbind(car_age, home_val, yoj, income, age)
temp%<>%as.data.frame(temp)
df%<>%dplyr::select(!c(car_age, home_val, yoj, income, age))%>%
cbind(temp)
df%<>%mutate_if(is.numeric, round)
#impute values for missing categorical data - job
job<-imputate_na(df, job, method = "mice", seed = 999)
p6 = plot(job)+theme_minimal()+theme(legend.position = "top")
# combine into new df
df<-df%>%dplyr::select(!job)
df<-cbind(df,job)
df$job<-factor(df$job)
#assemble plot grid
g1 <- as_grob(p1)
g2 <- as_grob(p2)
g3 <- as_grob(p3)
g4 <- as_grob(p4)
g5 <- as_grob(p5)
g6 <- as_grob(p6)
grid.arrange(g1, g2, g3, g4 , g5, g6, ncol=1)
options(scipen=-10)
#identify highly skewed data
df%>%find_skewness(index=FALSE, thres=TRUE)#this is good
# assess normality - Shapiro Wilke
df%>%normality()%>%data_frame()%>%
mutate(p_value = formatC(p_value, format = "e", digits = 2), statistic = round(statistic,3))%>%
flextable(theme_fun = theme_booktabs())
# other diagnostics
df%>%
diagnose_category()%>%
flextable(theme_fun = theme_booktabs())
df%>%
diagnose_numeric()%>%
dplyr::select(variables, min, mean, median, max, zero, minus)%>%
flextable(theme_fun = theme_booktabs())
df%>%plot_normality()
df%>%plot_normality(just = just)
df%>%plot_normality%>%as_grob()
df%>%plot_normality%>%as_grob( ncol=1)
df%>%plot_normality%>%as_grob()%>%grid.arrange()
df%>%plot_normality%>%as_grob()%>%grid.arrange( ncol=1)
valid.just(just)
valid.just(df%>%plot_normality)
resolveHJust(df%>%plot_normality, "left")
resolveHJust(df%>%plot_normality, "left")
#Correct obvious data errors - negative values
df$car_age[df$car_age < 0] <- NA
diagnose_outlier(df)%>%arrange(desc(outliers_cnt)) %>%
mutate_if(is.numeric, round , digits=3)%>% flextable()
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier()
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier()%>%resolveHJust("left")
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier()%>%resolveHJust("left")
df %>%
target_by(target_flag) %>%
relate(parent1) %>%
plot()
?plot
num_box<-select_if(df, is.numeric)
num_box<-cbind(df$target_flag, num_box)%>%
rename(target_flag = 'df$target_flag')
response = names(num_box)[1] #target_flag
response = purrr::set_names(response)
explain <- names(num_box)[3:16] #explanatory variables
explain = purrr::set_names(explain)
box_fun = function(x) {
ggplot(num_box, aes_string(x = x, y = 'target_flag') ) +
geom_boxplot(aes(fill = target_flag, alpha = 0.4), outlier.color =
'red', show.legend = FALSE)+
scale_fill_viridis(discrete = TRUE, option = "E")+
coord_flip()+
theme_classic()
}
b_plots<-map(explain, ~box_fun(.x)) #creates a list of plots
ggarrange(plotlist=b_plots, height = .5, ncol = 3)
df %>%
dplyr::select(find_outliers(df, index = FALSE)) %>%
plot_outlier()%>%resolveHJust("left")
df %>%
target_by(target_flag) %>%
relate(parent1) %>%
plot()
